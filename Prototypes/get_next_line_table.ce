/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tbouder <tbouder@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/01/05 11:07:36 by tbouder           #+#    #+#             */
/*   Updated: 2016/01/05 19:08:19 by tbouder          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"
#include <stdio.h>


int		ft_is_new(int fd, char ***str)
{
	int		i;

	i = 0;

	printf("%p\n", str[0][0]);
	printf("%p\n", str[1][0]);

	while (str[i][1])
	{
		if (ft_strcmp(str[i][1], ft_itoa(fd)) == 0)
			return (0);
		i++;
	}
	return (1);
}

int		ft_count(char ***str)
{
	int		i;

	i = 0;

	while (str[i][0])
		i++;
	return (i);
}

int		ft_extract_index(int fd, char ***str)
{
	int		i;

	i = 0;
	while (str[i][1])
	{
		if (ft_strcmp(str[i][1], ft_itoa(fd)) == 0)
			return (i);
		i++;
	}
	return (0);
}

static char		***helper(char ***str, char **line, int index)
{
	char	*dst;
	int		i;
	int		j;
	int		len;

	i = 0;
	j = 0;
	len = ft_linelen(str[index][0], 0);
	dst = ft_strnew(len);
	while (i < len)
	{
		dst[i] = str[index][0][j];
		j += 1;
		i += 1;
	}
	str[index][0] += j;
	*line = ft_strnew(len + 1);
	ft_strncpy(*line, dst, len);
	ft_strdel(&dst);
	return (str);
}

static int		ft_extract_line(const int fd, char ***str, int index)
{
	int				i;
	char			*buffer;
	t_list			*list;
	t_list			*tmp;

	list = NULL;
	buffer = ft_strnew(BUFF_SIZE);
	while ((i = read(fd, buffer, BUFF_SIZE)) > 0)
		ft_lstend(&list, buffer, i);
	if (i == -1)
		return (-1);
	str[index][0] = ft_strnew(ft_lstcontentsize(list));
	str[index][1] = ft_strnew(ft_strlen(ft_itoa(fd)));
	while (list)
	{
		tmp = list;
		list = list->next;
		str[index][0] = ft_strncat(str[index][0], tmp->content, tmp->content_size);
		free(tmp->content);
		free(tmp);
	}
	str[index][1] = ft_itoa(fd);
	ft_strdel(&buffer);
	return (1);
}

int				get_next_line(const int fd, char **line)
{
	static char		***str;
	int				i;

	if (line == NULL)
		return (-1);
	if (!str) // Premier passage : Si STR n'existe pas, on le cree, et on met *str a NULL
	{
		str = ft_memalloc(5);
		str[0] = ft_memalloc(2);
		str[1] = ft_memalloc(2);
		str[2] = ft_memalloc(2);
		i = ft_extract_line(fd, str, 0);
		if (i == -1)
			return (-1);
		if (str == NULL)
		{
			ft_strdel(*str);
			return (0);
		}
	}
	if (ft_is_new(fd, str) == 1)
	{
		i = ft_extract_line(fd, str, ft_count(str));
		if (i == -1)
			return (-1);
		if (str == NULL)
			return (0);
	}

	i = ft_extract_index(fd, str);
	str = helper(str, line, i);
	if (*str[i][0] == '\0')
	{
		str = NULL;
		return (0);
	}
	*str[i][0] == '\n' ? str[i][0]++ : 0;
	if (*str[i][0] == '\0')
	{
		str = NULL;
		return (1);
	}
	return (1);
}
